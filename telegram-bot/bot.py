import os
import random
import logging
import sqlite3
import datetime
from datetime import timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê
BOT_CONFIG = {
    'users_to_select': 3,      # –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞—Ç—å (1, 2, 3...)
    'joke_before_tag': True,   # True = —à—É—Ç–∫–∞ –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, False = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–æ–º —à—É—Ç–∫–∞
    'show_stats': True         # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º
GAY_JOKES = [
    "–ü–æ—á–µ–º—É –≥–µ–∏ –Ω–µ –±–æ—è—Ç—Å—è –ø—Ä–∏–≤–∏–¥–µ–Ω–∏–π? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ —É–∂–µ –≤–∏–¥–µ–ª–∏ –≤—ã—Ö–æ–¥—Ü—ã –∏–∑ —à–∫–∞—Ñ–æ–≤!",
]

# –§—Ä–∞–∑—ã –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä "–ø–∏–∑–¥–µ—Ü"
PIZDEC_PHRASES = [
    "–î–∞ —É–∂, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–∏–∑–¥–µ—Ü...",
    "–ü–∏–∑–¥–µ—Ü? –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ!",
]

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¢–∞—Ä–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
TARO = [
    "‚ú® –ö–∞—Ä—Ç–∞ –°–æ–ª–Ω—Ü–µ: –°–µ–≥–æ–¥–Ω—è –≤—Å–µ –±–∞–≥–∏ —Å–∞–º–∏ –ø–æ—Ñ–∏–∫—Å—è—Ç—Å—è",
    "üåô –ö–∞—Ä—Ç–∞ –õ—É–Ω–∞: –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥—É—Ç",
    "‚≠ê –ö–∞—Ä—Ç–∞ –ó–≤–µ–∑–¥–∞: –ù–∞–π–¥–µ—à—å –±–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ –∏—Å–∫–∞–ª–∏ –≥–æ–¥–∞–º–∏",
    "üíñ –ö–∞—Ä—Ç–∞ –í–ª—é–±–ª–µ–Ω–Ω—ã–µ: –í—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–ø—Ä–∞–≤—è—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞",
    "üèÜ –ö–∞—Ä—Ç–∞ –°–∏–ª–∞: –û–±–ª–∞–∫–æ –Ω–µ –µ–±–ª–∞–Ω–∏—Ç",
    "üéâ –ö–∞—Ä—Ç–∞ –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã: –î–µ–Ω—å –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫",
    "üåÖ –ö–∞—Ä—Ç–∞ –ú–∏—Ä: –í—Å–µ —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏ –ø–æ –æ—à–∏–±–∫–∞–º –≤ —Å–∞–º–∏—Ö —Ç–µ—Å—Ç–∞—Ö",
    "üí∞ –ö–∞—Ä—Ç–∞ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä: –†–µ–ª–∏–∑ –±—É–¥–µ—Ç –≤–æ–≤—Ä–µ–º—è",
    "üîß –ö–∞—Ä—Ç–∞ –ú–∞–≥: –í—Å–µ –º–∞–≥–∏—á–µ—Å–∫–∏ —Å–∞–º–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç",
    "üìä –ö–∞—Ä—Ç–∞ –ü—Ä–∞–≤–æ—Å—É–¥–∏–µ: –ù–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –í–û–°–∏—Ç—å –Ω–µ–¥–µ–ª—é",
    "‚ò†Ô∏è –ö–∞—Ä—Ç–∞ –°–º–µ—Ä—Ç—å: –û—à–∏–±–∫–∞ —Å –±–æ—è",
    "üî• –ö–∞—Ä—Ç–∞ –ë–∞—à–Ω—è: –í–µ—Å—å –¥–µ–Ω—å –±—É–¥—É—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ ",
    "üëª –ö–∞—Ä—Ç–∞ –û—Ç—à–µ–ª—å–Ω–∏–∫: –ó–∞—Å—Ç—Ä—è–Ω–µ—à—å –Ω–∞ –æ–¥–Ω–æ–º –±–∞–≥–µ –Ω–∞ 8 —á–∞—Å–æ–≤",
    "üíÄ –ö–∞—Ä—Ç–∞ –î—å—è–≤–æ–ª: –í—Å–µ –±—É–¥–µ—Ç —Ä–∞–∑—ä–µ–±–∞–Ω–æ –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
    "üå™Ô∏è –ö–∞—Ä—Ç–∞ –°—É–¥: –° –ª–æ–≥–∞–º–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—à—å –ê—à–∏–±–∫—É",
    "‚õàÔ∏è –ö–∞—Ä—Ç–∞ –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π: –±—É–¥–µ—à—å –∏—Å–∫–∞—Ç—å –º–∞–∫–µ—Ç –ø–æ–ª –¥–Ω—è",
    "üï∑Ô∏è –ö–∞—Ä—Ç–∞ –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞: '—Å—Ä–æ—á–Ω–∞—è' —Ñ–∏—á–∞!",
]

# –ú–µ–º—ã –Ω–∞ "–û—à–∏–±–∫–∞" –¥–ª—è IT
ERROR_MEMES = [
    "–£ –º–µ–Ω—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è",
    "–≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, —ç—Ç–æ undocumented feature!",
    "–û—à–∏–±–∫–∞ - —ç—Ç–æ –∫–æ–≥–¥–∞ expected != actual, –∞ –≤ –∂–∏–∑–Ω–∏ expected != expected",
    "–ú–æ–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ù–µ –∑–Ω–∞—é, —è –µ–≥–æ –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª ü§∑‚Äç‚ôÇÔ∏è",
    "–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! (–Ω–∞ –º–æ–µ–π –º–∞—à–∏–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)",
    "–≠—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞!",
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        count_day INTEGER DEFAULT 0,
        count_week INTEGER DEFAULT 0,
        count_total INTEGER DEFAULT 0,
        last_selected_date TEXT
    )
    ''')
    conn.commit()
    conn.close()

def update_user_stats(user_id, username, first_name, last_name):
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    today = datetime.date.today().isoformat()
    
    cursor.execute('SELECT * FROM user_stats WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if user:
        cursor.execute('''
            UPDATE user_stats 
            SET count_total = count_total + 1,
                username = ?, first_name = ?, last_name = ?,
                last_selected_date = ?
            WHERE user_id = ?
        ''', (username, first_name, last_name, today, user_id))
    else:
        cursor.execute('''
            INSERT INTO user_stats (user_id, username, first_name, last_name, count_total, last_selected_date)
            VALUES (?, ?, ?, ?, 1, ?)
        ''', (user_id, username, first_name, last_name, today))
    
    conn.commit()
    conn.close()

def get_user_stats(user_id):
    conn = sqlite3.connect('bot_stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT count_total FROM user_stats WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

# –ö–æ–º–∞–Ω–¥–∞ /rainbow
async def rainbow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        members = await context.bot.get_chat_administrators(chat_id)
        human_members = [m for m in members if not m.user.is_bot]
        
        if not human_members:
            await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        selected_members = random.sample(human_members, min(BOT_CONFIG['users_to_select'], len(human_members)))
        
        response = ""
        
        # –°–Ω–∞—á–∞–ª–∞ —à—É—Ç–∫–∞, –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if BOT_CONFIG['joke_before_tag']:
            joke = random.choice(GAY_JOKES)
            response += f"{joke}\n\n"
            
            for member in selected_members:
                user = member.user
                update_user_stats(user.id, user.username, user.first_name, user.last_name)
                user_name = f"{user.first_name}"
                if user.last_name:
                    user_name += f" {user.last_name}"
                if user.username:
                    user_name += f" (@{user.username})"
                response += f"üé≤ {user_name}\n"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ—Ç–æ–º —à—É—Ç–∫–∞
        else:
            for member in selected_members:
                user = member.user
                update_user_stats(user.id, user.username, user.first_name, user.last_name)
                user_name = f"{user.first_name}"
                if user.last_name:
                    user_name += f" {user.last_name}"
                if user.username:
                    user_name += f" (@{user.username})"
                response += f"üé≤ {user_name}\n"
            
            joke = random.choice(GAY_JOKES)
            response += f"\n{joke}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if BOT_CONFIG['show_stats']:
            for member in selected_members:
                user = member.user
                stats = get_user_stats(user.id)
                response += f"\nüìä {user.first_name} –≤—ã–±–∏—Ä–∞–ª–∏: {stats} —Ä–∞–∑(–∞)"
        
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"Error in rainbow_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!")

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        total = get_user_stats(user_id)
        
        response = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total} —Ä–∞–∑(–∞)"
        
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")

# –ö–æ–º–∞–Ω–¥–∞ /taro
async def taro_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prediction = random.choice(TARO)
    await update.message.reply_text(f"üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{prediction}")

# –¢—Ä–∏–≥–≥–µ—Ä "–ø–∏–∑–¥–µ—Ü"
async def pizdec_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phrase = random.choice(PIZDEC_PHRASES)
    await update.message.reply_text(phrase)

# –¢—Ä–∏–≥–≥–µ—Ä "–û—à–∏–±–∫–∞"
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    meme = random.choice(ERROR_MEMES)
    await update.message.reply_text(meme)

# –¢—Ä–∏–≥–≥–µ—Ä "–ö–∞—Ç—è/–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ + –ø–æ–∫–∞"
async def katya_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.first_name and ('–∫–∞—Ç—è' in user.first_name.lower() or '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞' in user.first_name.lower()):
        if '–ø–æ–∫–∞' in update.message.text.lower():
            await update.message.reply_text("–ü–æ–∫–∞ –ö–∞—Ç—å! üëã")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("rainbow", rainbow_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("taro", taro_command))
    
    # –¢—Ä–∏–≥–≥–µ—Ä—ã
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"(?i)–ø–∏–∑–¥–µ—Ü"), pizdec_handler))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"(?i)–æ—à–∏–±–∫–∞"), error_handler))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"(?i)–ø–æ–∫–∞"), katya_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling()

if __name__ == "__main__":
    main()