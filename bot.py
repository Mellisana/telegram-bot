import os
import random
import logging
import sqlite3
import datetime
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–µ–π—Å–∫–∏–µ –ø–æ–¥–∫–æ–ª—ã –¥–ª—è –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
GAY_JOKES = [
    "–ö–∞–∫ –ø–∏–¥–æ—Ä—ã –Ω–∞–∑—ã–≤–∞—é—Ç —Å–≤–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π? - –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π!",
    "–ü–æ—á–µ–º—É –ø–∏–¥–æ—Ä—ã —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –ª—é–±—è—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è!",
    "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –ø–∏–¥–æ—Ä–æ–º –∏ –ø–∏—Ü—Ü–µ–π? –û–±–∞ –ª—é–±—è—Ç, –∫–æ–≥–¥–∞ –∏—Ö —É–∫–ª–∞–¥—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–æ–ª!",
    "–ü–æ—á–µ–º—É –ø–∏–¥–æ—Ä—ã –ª—é–±—è—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? - –¢–∞–º –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–≤—è–∑–µ–π!",
    "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø–∏–¥–æ—Ä –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏? - –°–µ–π—á–∞—Å –≤–æ–π–¥—É –≤ –ø—Ä–æ—Ü–µ—Å—Å!",
    "–ü–æ—á–µ–º—É –ø–∏–¥–æ—Ä—ã —Ö–æ—Ä–æ—à–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏? - –û–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –≤—Å–µ –¥—ã—Ä–æ—á–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ!",
    "–ö–∞–∫ –ø–∏–¥–æ—Ä —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã? - –ü–æ–¥—Ö–æ–¥–∏—Ç —Å –∑–∞–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã!",
    "–ö–∞–∫ –ø–∏–¥–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç –±–∞–≥–∏? - –ß—É—Ç—å–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏—Å–∫–∞—Ç–µ–ª—è!",
    "–ß—Ç–æ –ø–∏–¥–æ—Ä –¥—É–º–∞–µ—Ç –æ –∫–æ–¥–µ? - –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–æ —Å–∑–∞–¥–∏!",
    "–ò—â–µ–º –ª—é–±–∏—Ç–µ–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –≤ –°–ë–ò–°–µ",
    "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –Ω–∞ –≤–æ–ª–Ω—É –∞–≤—Ç–æ—Ä–∞ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–æ —Ä–µ–ª–∏–∑–∞",
    "–í—ã–±–∏—Ä–∞–µ–º –ª–µ—Å–Ω—É—é –±–∞–Ω–∫—É...."
]

# –ì—Ä—É–±—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
RUDE_RESPONSES = [
    "–î–∞ –∏–¥–∏ —Ç—ã –Ω–∞—Ö—É–π —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏!",
    "–ü–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –º–Ω–µ –ø–æ—Ö—É–π!",
    "–ù—É –≤–æ—Ç –æ–ø—è—Ç—å —ç—Ç–æ—Ç –ø–∏–∑–¥–µ—Ü –Ω–∞—á–∞–ª—Å—è...",
    "–ò–¥–∏ –Ω–∞—Ö—É–π, —è –∑–∞–Ω—è—Ç –±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–π —Ö—É–π–Ω–µ–π!",
    "–ü–∏–∑–¥–µ—Ü –∫–∞–∫ –≤—Å—ë –∑–∞–µ–±–∞–ª–æ!",
    "–û–ø—è—Ç—å —ç—Ç–æ—Ç —Ö—É–µ–≤—ã–π –ø–∏–∑–¥–µ—Ü..."
]

# –û—Ç–≤–µ—Ç—ã –Ω–∞ IT-—Ç—Ä–∏–≥–≥–µ—Ä—ã
IT_RESPONSES = {
    '–æ—Ñ–∏—Å': [
        "–û—Ñ–∏—Å? –≠—Ç–æ –º–µ—Å—Ç–æ –≥–¥–µ –ø–∏–¥–æ—Ä—ã –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ —Å 9 –¥–æ 6! üé≠",
        "–í –æ—Ñ–∏—Å–µ –≤—Å–µ –∑–Ω–∞—é—Ç, —á–µ–π —Å—Ç—É–ª —Å–∫—Ä–∏–ø–∏—Ç –≥—Ä–æ–º—á–µ –≤—Å–µ—Ö! üí∫üîä",
        "–û—Ñ–∏—Å–Ω—ã–π –ø–∏–¥–æ—Ä –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—Ç, –≥–¥–µ –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π —É–¥–æ–±–Ω—ã–π —Å—Ç—É–ª! üíº",
        "–í –æ—Ñ–∏—Å–µ –ø–∏–¥–æ—Ä—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —É –∫—É–ª–µ—Ä–∞, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã! üí¶"
    ],
    '–æ—à–∏–±–∫–∞': [
        "–≠—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞! üêõüè≥Ô∏è‚Äçüåà",
        "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ - –ø–∏–¥–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É! ‚ö†Ô∏è",
        "–û—à–∏–±–∫–∞ 404: –ü–∏–¥–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –∫–æ–¥–µ! üîç",
        "Runtime Error: –ü–∏–¥–æ—Ä –ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –Ω–µ –≤ —Ç—É —Ñ—É–Ω–∫—Ü–∏—é! üö´"
    ],
    '–∞–π–æ—Å': [
        "iOS - –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞ –¥–ª—è –ø–∏–¥–æ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ª—é–±—è—Ç –∫–æ–≥–¥–∞ –∑–∞ –Ω–∏—Ö –≤—Å–µ —Ä–µ—à–∞—é—Ç! üì±‚ú®",
        "iPhone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø–∏–¥–æ—Ä—ã —Å –∑–æ–ª–æ—Ç—ã–º–∏ —Ü–µ–ø—è–º–∏! üì±‚õìÔ∏è",
        "iOS —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–∏–¥–æ—Ä –≤ –ø–æ–∑–æ–ª–æ—á–µ–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–µ! üè¢"
    ],
    '–∞–Ω–¥—Ä–æ–∏–¥': [
        "Android - –¥–ª—è –ø–∏–¥–æ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ª—é–±—è—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥ —Å–µ–±—è! ü§ñüîß",
        "Android —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –ø–∏–¥–æ—Ä—ã –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –∫–æ–¥–æ–º! üíª",
        "Android –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–∏–¥–æ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏! üé®",
        "–ü–∏–¥–æ—Ä –Ω–∞ Android –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å! üåà"
    ],
    '–±–∞–≥': [
        "–ù–∞—à–µ–ª –±–∞–≥? –ó–Ω–∞—á–∏—Ç —Ç—ã —Ö–æ—Ä–æ—à–∏–π –ø–∏–¥–æ—Ä-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫! üêõüîç",
        "–ë–∞–≥ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ–∏—á–∞, –∫–æ—Ç–æ—Ä—É—é –ø–∏–¥–æ—Ä –µ—â–µ –Ω–µ –ø–æ–Ω—è–ª! üêû",
        "–ö–∞–∂–¥–æ–º—É –±–∞–≥—É –Ω—É–∂–µ–Ω —Å–≤–æ–π –ø–∏–¥–æ—Ä –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! üõ†Ô∏è"
    ],
    '–∫—É–ª–∏–∫': [
        "–ù–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ —ç—Ç–æ –∏–º—è –≤—Å–ª—É—Ö",
        "–ß—Ç–æ –æ–Ω —Ç–µ–±–µ —Å–¥–µ–ª–∞–ª—å??",
    ],
    '—Å–µ—Ä–µ–∂–∞': [
        "–Ω–µ –°–µ—Ä—ë–∂–∞, –∞ –°–µ—Ä–ì–ï–ô",
    ]
}

# –¢–ò–¢–£–õ–´ –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –í–´–ë–û–†–ê
TITLES = {
    'pidor': {
        'title': 'üèÜ –ü–∏–¥–æ—Ä –î–Ω—è',
        'description': '–°–∞–º—ã–π –≤–µ–∑—É—á–∏–π –Ω–µ—É–¥–∞—á–Ω–∏–∫ —á–∞—Ç–∞!',
        'emoji': 'üèÜ'
    },
    'favorite': {
        'title': 'üíñ –õ—é–±–∏–º—á–∏–∫ –î–Ω—è', 
        'description': '–ß—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π!',
        'emoji': 'üíñ'
    },
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS daily_results (
        date TEXT PRIMARY KEY,
        results TEXT,
        last_updated TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        title_type TEXT,
        count INTEGER DEFAULT 0,
        last_awarded TEXT,
        PRIMARY KEY (user_id, title_type)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_reactions (
        message_id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        reactions_count INTEGER DEFAULT 0,
        date TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

def get_today_results():
    today = datetime.now().date().isoformat()
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT results FROM daily_results WHERE date = ?', (today,))
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else None

def save_today_results(results):
    today = datetime.now().date().isoformat()
    now = datetime.now().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO daily_results (date, results, last_updated)
        VALUES (?, ?, ?)
    ''', (today, results, now))
    
    conn.commit()
    conn.close()

def update_user_stats(user_id, username, first_name, last_name, title_type):
    today = datetime.now().date().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO user_stats 
        (user_id, username, first_name, last_name, title_type, count, last_awarded)
        VALUES (?, ?, ?, ?, ?, COALESCE((SELECT count FROM user_stats WHERE user_id = ? AND title_type = ?), 0) + 1, ?)
    ''', (user_id, username, first_name, last_name, title_type, user_id, title_type, today))
    
    conn.commit()
    conn.close()

def get_user_stats_period(title_type, period_days):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    start_date = (datetime.now() - timedelta(days=period_days)).date().isoformat()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ? AND last_awarded >= ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type, start_date))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_all_time_stats(title_type):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type,))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_random_users(chat_members, count=1):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
    human_members = [m for m in chat_members if not m.user.is_bot]
    if not human_members:
        return []
    return random.sample(human_members, min(count, len(human_members)))

def get_top_user_by_reactions():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date().isoformat()
    cursor.execute('''
        SELECT user_id, username, first_name, last_name, SUM(reactions_count) as total_reactions
        FROM message_reactions 
        WHERE date = ?
        GROUP BY user_id 
        ORDER BY total_reactions DESC 
        LIMIT 1
    ''', (today,))
    
    result = cursor.fetchone()
    conn.close()
    
    return result

async def save_message_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –µ–≥–æ —Ä–µ–∞–∫—Ü–∏—è—Ö"""
    try:
        message = update.message
        if not message:
            return
            
        user = message.from_user
        if not user:
            return
        
        # –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫–æ–π –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π)
        reaction_count = 1  # –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º—É–º 1 "—Ä–µ–∞–∫—Ü–∏—é"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∑–∞ replies
        if message.reply_to_message:
            reaction_count += 2  # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ = +2 —Ä–µ–∞–∫—Ü–∏–∏
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: reactions_count = {reaction_count}")
        
        conn = sqlite3.connect('daily_titles.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO message_reactions 
            (message_id, user_id, username, first_name, last_name, reactions_count, date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            message.message_id, 
            user.id, 
            user.username, 
            user.first_name, 
            user.last_name,
            reaction_count,
            datetime.now().date().isoformat()
        ))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error saving message reaction: {e}")

async def get_all_chat_members(chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–∫ fallback)"""
    try:
        members = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        try:
            async for member in context.bot.get_chat_members(chat_id):
                members.append(member)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            # Fallback - –ø–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            try:
                admin_members = await context.bot.get_chat_administrators(chat_id)
                members.extend(admin_members)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(members)}")
            except Exception as admin_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_error}")
                return []
        
        return members
        
    except Exception as e:
        logger.error(f"Error getting chat members: {e}")
        return []

async def assign_pidor_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ü–∏–¥–æ—Ä–∞ –î–Ω—è"""
    try:
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        today_results = get_today_results()
        if today_results and '–ü–∏–¥–æ—Ä –î–Ω—è' in today_results:
            await update.message.reply_text("üìÖ –ü–∏–¥–æ—Ä –¥–Ω—è —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = await get_all_chat_members(chat_id, context)
        if not members:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏–¥–æ—Ä–∞: {len(members)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π
        human_members = [m for m in members if not m.user.is_bot]
        if not human_members:
            await update.message.reply_text("‚ùå –í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Å–µ –±–æ—Ç—ã?)!")
            return
            
        logger.info(f"–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(human_members)}")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–π-—à—É—Ç–∫—É
        gay_joke = random.choice(GAY_JOKES)
        await update.message.reply_text(gay_joke)
        await asyncio.sleep(1)
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –±–∞—Ä–∞–±–∞–Ω–∞ (—ç–º–æ–¥–∑–∏)
        drum_msg = await update.message.reply_text("ü•Å *–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å...* ü•Å", parse_mode='Markdown')
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞
        
        # 3. –í—ã–±–∏—Ä–∞–µ–º –ø–∏–¥–æ—Ä–∞ –¥–Ω—è –∏–∑ –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        pidor_user = random.choice(human_members).user
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        update_user_stats(
            pidor_user.id, 
            pidor_user.username, 
            pidor_user.first_name, 
            pidor_user.last_name, 
            'pidor'
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pidor_name = f"{pidor_user.first_name or ''}"
        if pidor_user.last_name:
            pidor_name += f" {pidor_user.last_name}"
        if pidor_user.username:
            pidor_name += f" (@{pidor_user.username})"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üèÜ *–ü–∏–¥–æ—Ä –î–Ω—è* üèÜ\n"
        response += f"–°–∞–º—ã–π –≤–µ–∑—É—á–∏–π –Ω–µ—É–¥–∞—á–Ω–∏–∫ —á–∞—Ç–∞!\n"
        response += f"ü•á {pidor_name}\n"
        response += f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(human_members)}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        save_today_results(response)
        
        await drum_msg.edit_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in assign_pidor_day: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏–¥–æ—Ä–∞ –¥–Ω—è!")

async def assign_favorite_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –õ—é–±–∏–º—á–∏–∫–∞ –î–Ω—è"""
    try:
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        today_results = get_today_results()
        if today_results and '–õ—é–±–∏–º—á–∏–∫ –î–Ω—è' in today_results:
            await update.message.reply_text("üìÖ –õ—é–±–∏–º—á–∏–∫ –¥–Ω—è —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = await get_all_chat_members(chat_id, context)
        if not members:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞!")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤
        human_members = [m for m in members if not m.user.is_bot]
        if not human_members:
            await update.message.reply_text("‚ùå –í —á–∞—Ç–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è (–ø–æ —Ä–µ–∞–∫—Ü–∏—è–º –∏–∑ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å)
        favorite_user_data = get_top_user_by_reactions()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏—è—Ö, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if not favorite_user_data:
            favorite_user = random.choice(human_members).user
            favorite_name = f"{favorite_user.first_name or ''}"
            if favorite_user.last_name:
                favorite_name += f" {favorite_user.last_name}"
            if favorite_user.username:
                favorite_name += f" (@{favorite_user.username})"
            favorite_name += " (–≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω–æ)"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            update_user_stats(
                favorite_user.id,
                favorite_user.username,
                favorite_user.first_name,
                favorite_user.last_name,
                'favorite'
            )
        else:
            user_id, username, first_name, last_name, total_reactions = favorite_user_data
            favorite_name = f"{first_name or ''}"
            if last_name:
                favorite_name += f" {last_name}"
            if username:
                favorite_name += f" (@{username})"
            favorite_name += f" - {total_reactions} —Ä–µ–∞–∫—Ü–∏–π"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            update_user_stats(user_id, username, first_name, last_name, 'favorite')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üíñ *–õ—é–±–∏–º—á–∏–∫ –î–Ω—è* üíñ\n"
        response += f"–ß—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π!\n"
        response += f"ü•á {favorite_name}\n"
        response += f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(human_members)}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        save_today_results(response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in assign_favorite_day: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è!")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏–¥–æ—Ä–æ–≤ –∏ –ª—é–±–∏–º—á–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≤—Å–µ –≤—Ä–µ–º—è"""
    try:
        response = "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–¢–£–õ–û–í* üìä\n\n"
        
        for title_type, title_info in TITLES.items():
            response += f"{title_info['emoji']} *{title_info['title']}* {title_info['emoji']}\n"
            
            # –ó–∞ –Ω–µ–¥–µ–ª—é
            week_stats = get_user_stats_period(title_type, 7)
            response += "üìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
            if week_stats:
                for i, (username, first_name, last_name, count) in enumerate(week_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –º–µ—Å—è—Ü
            month_stats = get_user_stats_period(title_type, 30)
            response += "üìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
            if month_stats:
                for i, (username, first_name, last_name, count) in enumerate(month_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è
            all_time_stats = get_all_time_stats(title_type)
            response += "üìÖ *–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:*\n"
            if all_time_stats:
                for i, (username, first_name, last_name, count) in enumerate(all_time_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            response += "\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/pidor - –í—ã–±—Ä–∞—Ç—å –ø–∏–¥–æ—Ä–∞ –¥–Ω—è üèÜ
/favorite - –í—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è üíñ  
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É ‚ùì

üí¨ *–¢—Ä–∏–≥–≥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:*
- "–¥–∞" ‚Üí "–ü–∏–∑–¥–∞!"
- "–Ω–µ—Ç" ‚Üí "–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç!"
- IT-—Å–ª–æ–≤–∞ (–æ—Ñ–∏—Å, –æ—à–∏–±–∫–∞, –∞–π–æ—Å, –∞–Ω–¥—Ä–æ–∏–¥, –±–∞–≥, –∫—É–ª–∏–∫, —Å–µ—Ä–µ–∂–∞)
- "–ø–∏–∑–¥–µ—Ü" ‚Üí —Å–ª—É—á–∞–π–Ω—ã–π –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç

‚ö†Ô∏è *–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!*
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def members_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    try:
        chat_id = update.effective_chat.id
        members = await get_all_chat_members(chat_id, context)
        
        if not members:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
            return
        
        human_members = [m for m in members if not m.user.is_bot]
        
        response = f"üë• *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ê–¢–ï* üë•\n\n"
        response += f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}\n"
        response += f"–õ—é–¥–µ–π (–Ω–µ –±–æ—Ç–æ–≤): {len(human_members)}\n\n"
        response += f"*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n"
        
        for i, member in enumerate(human_members[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 15
            user = member.user
            name = f"{user.first_name or ''}"
            if user.last_name:
                name += f" {user.last_name}"
            if user.username:
                name += f" (@{user.username})"
            response += f"{i}. {name}\n"
        
        if len(human_members) > 15:
            response += f"\n... –∏ –µ—â–µ {len(human_members) - 15} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in members_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ")

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_triggers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)"""
    try:
        if not update.message or not update.message.text:
            return
            
        message_text = update.message.text.lower()
        user = update.message.from_user
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: {message_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è)
        await save_message_reaction(update, context)
        
        # –¢—Ä–∏–≥–≥–µ—Ä: –ö–∞—Ç—è/–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ + "–ø–æ–∫–∞" (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        if user.first_name:
            user_name_lower = user.first_name.lower()
            if ('–∫–∞—Ç—è' in user_name_lower or '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞' in user_name_lower) and '–ø–æ–∫–∞' in message_text:
                await update.message.reply_text("–ü–æ–∫–∞ –ö–∞—Ç—å! üëã")
                return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–¥–∞" -> "–ü–∏–∑–¥–∞" (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if message_text.strip() == '–¥–∞':
            await update.message.reply_text("–ü–∏–∑–¥–∞! üòè")
            return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–Ω–µ—Ç" -> "–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç" (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if message_text.strip() == '–Ω–µ—Ç':
            await update.message.reply_text("–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç! üè≥Ô∏è‚Äçüåà")
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–æ—à–∏–±–∫–∞" –∏–ª–∏ "error" -> IT –æ—Ç–≤–µ—Ç
        if '–æ—à–∏–±–∫–∞' in message_text or 'error' in message_text:
            it_response = random.choice(IT_RESPONSES['–æ—à–∏–±–∫–∞'])
            await update.message.reply_text(it_response)
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–ø–∏–∑–¥–µ—Ü" -> –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç
        if '–ø–∏–∑–¥–µ—Ü' in message_text:
            rude_response = random.choice(RUDE_RESPONSES)
            await update.message.reply_text(rude_response)
            return
            
        # IT-—Ç—Ä–∏–≥–≥–µ—Ä—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        words = message_text.lower().split()
        for word in words:
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–æ –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            clean_word = word.strip().rstrip('.,!?;:')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            for trigger in ['–æ—Ñ–∏—Å', '–æ—à–∏–±–∫–∞', '–∞–π–æ—Å', '–∞–Ω–¥—Ä–æ–∏–¥', '–±–∞–≥', '–∫—É–ª–∏–∫', '—Å–µ—Ä–µ–∂–∞']:
                if trigger in clean_word:
                    it_response = random.choice(IT_RESPONSES.get(trigger, ["–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"]))
                    await update.message.reply_text(it_response)
                    return
                
    except Exception as e:
        logger.error(f"Error in message_triggers: {e}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("pidor", assign_pidor_day))
    application.add_handler(CommandHandler("favorite", assign_favorite_day))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("start", help_command))
    application.add_handler(CommandHandler("members", members_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_triggers))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        application.run_polling()
    except Exception as e:
        logger.error(f"Error running bot: {e}")

if __name__ == "__main__":
    main()
