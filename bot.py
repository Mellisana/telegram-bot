import os
import random
import logging
import sqlite3
import datetime
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–µ–π—Å–∫–∏–µ –ø–æ–¥–∫–æ–ª—ã –¥–ª—è –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
GAY_JOKES = [
    "–ö–∞–∫ –ø–∏–¥–æ—Ä—ã –Ω–∞–∑—ã–≤–∞—é—Ç —Å–≤–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π? - –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π!",
    "–ü–æ—á–µ–º—É –ø–∏–¥–æ—Ä—ã —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –ª—é–±—è—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è!",
    "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –ø–∏–¥–æ—Ä–æ–º –∏ –ø–∏—Ü—Ü–µ–π? –û–±–∞ –ª—é–±—è—Ç, –∫–æ–≥–¥–∞ –∏—Ö —É–∫–ª–∞–¥—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–æ–ª!",
    "–ü–æ—á–µ–º—É –ø–∏–¥–æ—Ä—ã –ª—é–±—è—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? - –¢–∞–º –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–≤—è–∑–µ–π!",
    "–ö–∞–∫ –ø–∏–¥–æ—Ä —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã? - –ü–æ–¥—Ö–æ–¥–∏—Ç —Å –∑–∞–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã!",
]

# –ì—Ä—É–±—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
RUDE_RESPONSES = [
    "–ü–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –º–Ω–µ –ø–æ—Ö—É–π!",
    "–ù—É –≤–æ—Ç –æ–ø—è—Ç—å —ç—Ç–æ—Ç –ø–∏–∑–¥–µ—Ü –Ω–∞—á–∞–ª—Å—è...",
    "–ò–¥–∏ –Ω–∞—Ö—É–π, —è –∑–∞–Ω—è—Ç –±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–π —Ö—É–π–Ω–µ–π!",
    "–ü–∏–∑–¥–µ—Ü –∫–∞–∫ –≤—Å—ë –∑–∞–µ–±–∞–ª–æ!",
    "–û–ø—è—Ç—å —ç—Ç–æ—Ç —Ö—É–µ–≤—ã–π –ø–∏–∑–¥–µ—Ü..."
]

# –û—Ç–≤–µ—Ç—ã –Ω–∞ IT-—Ç—Ä–∏–≥–≥–µ—Ä—ã (–ø–æ 15+ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ)
IT_RESPONSES = {
    '–æ—Ñ–∏—Å': [
    
    ],
    '–æ—à–∏–±–∫–∞': [
        "–û—à–∏–±–∫–∞? –≠—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞! üêõüè≥Ô∏è‚Äçüåà",
        "Deadlock - –¥–≤–∞ –ø–∏–¥–æ—Ä–∞ –Ω–µ –º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –∫—Ç–æ —Å–≤–µ—Ä—Ö—É! ‚öñÔ∏è",
        "Buffer overflow - –ø–∏–¥–æ—Ä –Ω–µ –∑–Ω–∞–µ—Ç –º–µ—Ä—ã! üé™",
        "Fatal error - –ø–∏–¥–æ—Ä –¥–æ–≤–µ–ª —Å–∏—Å—Ç–µ–º—É –¥–æ –æ—Ä–≥–∞–∑–º–∞! üíÄ"
    ],
    '–∞–π–æ—Å': [
        "iOS - –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞ –¥–ª—è –ø–∏–¥–æ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ª—é–±—è—Ç –∫–æ–≥–¥–∞ –∑–∞ –Ω–∏—Ö –≤—Å–µ —Ä–µ—à–∞—é—Ç! üì±‚ú®",
    ],
    '–∞–Ω–¥—Ä–æ–∏–¥': [
        "Android - –¥–ª—è –ø–∏–¥–æ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ª—é–±—è—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥ —Å–µ–±—è! ü§ñüîß",
        "Android —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –ø–∏–¥–æ—Ä—ã –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –∫–æ–¥–æ–º! üíª",
    ]
}

# –¢–ò–¢–£–õ–´ –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –í–´–ë–û–†–ê
TITLES = {
    'pidor': {
        'title': 'üèÜ –ü–∏–¥–æ—Ä –î–Ω—è',
        'description': '–°–∞–º—ã–π –≤–µ–∑—É—á–∏–π –Ω–µ—É–¥–∞—á–Ω–∏–∫ —á–∞—Ç–∞!',
        'emoji': 'üèÜ'
    },
    'favorite': {
        'title': 'üíñ –õ—é–±–∏–º—á–∏–∫ –î–Ω—è', 
        'description': '–ß—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π!',
        'emoji': 'üíñ'
    },
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS daily_results (
        date TEXT PRIMARY KEY,
        results TEXT,
        last_updated TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        title_type TEXT,
        count INTEGER DEFAULT 0,
        last_awarded TEXT,
        PRIMARY KEY (user_id, title_type)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_reactions (
        message_id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        reactions_count INTEGER DEFAULT 0,
        date TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tester_predictions (
        user_id INTEGER PRIMARY KEY,
        last_prediction_date TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

def get_today_results():
    today = datetime.now().date().isoformat()
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT results FROM daily_results WHERE date = ?', (today,))
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else None

def save_today_results(results):
    today = datetime.now().date().isoformat()
    now = datetime.now().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO daily_results (date, results, last_updated)
        VALUES (?, ?, ?)
    ''', (today, results, now))
    
    conn.commit()
    conn.close()

def update_user_stats(user_id, username, first_name, last_name, title_type):
    today = datetime.now().date().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO user_stats 
        (user_id, username, first_name, last_name, title_type, count, last_awarded)
        VALUES (?, ?, ?, ?, ?, COALESCE((SELECT count FROM user_stats WHERE user_id = ? AND title_type = ?), 0) + 1, ?)
    ''', (user_id, username, first_name, last_name, title_type, user_id, title_type, today))
    
    conn.commit()
    conn.close()

def get_user_stats_period(title_type, period_days):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    start_date = (datetime.now() - timedelta(days=period_days)).date().isoformat()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ? AND last_awarded >= ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type, start_date))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_all_time_stats(title_type):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type,))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_random_users(chat_members, count=1):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
    human_members = [m for m in chat_members if not m.user.is_bot]
    return random.sample(human_members, min(count, len(human_members)))

def get_top_user_by_reactions():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date().isoformat()
    cursor.execute('''
        SELECT user_id, username, first_name, last_name, SUM(reactions_count) as total_reactions
        FROM message_reactions 
        WHERE date = ?
        GROUP BY user_id 
        ORDER BY total_reactions DESC 
        LIMIT 1
    ''', (today,))
    
    result = cursor.fetchone()
    conn.close()
    
    return result

def can_user_get_prediction(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().date().isoformat()
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT last_prediction_date FROM tester_predictions WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result and result[0] == today:
        conn.close()
        return False
    
    cursor.execute('''
        INSERT OR REPLACE INTO tester_predictions (user_id, last_prediction_date)
        VALUES (?, ?)
    ''', (user_id, today))
    
    conn.commit()
    conn.close()
    return True

async def save_message_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –µ–≥–æ —Ä–µ–∞–∫—Ü–∏—è—Ö"""
    try:
        message = update.message
        user = message.from_user
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
        reaction_count = 0
        if message.reactions:
            for reaction in message.reactions:
                reaction_count += reaction.count
        
        conn = sqlite3.connect('daily_titles.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO message_reactions 
            (message_id, user_id, username, first_name, last_name, reactions_count, date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            message.message_id, 
            user.id, 
            user.username, 
            user.first_name, 
            user.last_name,
            reaction_count,
            datetime.now().date().isoformat()
        ))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error saving message reaction: {e}")

async def get_chat_members(chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = []
        async for member in context.bot.get_chat_members(chat_id):
            members.append(member)
        return members
    except Exception as e:
        logger.error(f"Error getting chat members: {e}")
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∫ fallback
        return await context.bot.get_chat_administrators(chat_id)

async def assign_pidor_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ü–∏–¥–æ—Ä–∞ –î–Ω—è"""
    try:
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        today_results = get_today_results()
        if today_results and '–ü–∏–¥–æ—Ä –î–Ω—è' in today_results:
            await update.message.reply_text("üìÖ –ü–∏–¥–æ—Ä –¥–Ω—è —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = await get_chat_members(chat_id, context)
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–π-—à—É—Ç–∫—É
        gay_joke = random.choice(GAY_JOKES)
        await update.message.reply_text(gay_joke)
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –±–∞—Ä–∞–±–∞–Ω–∞ (—ç–º–æ–¥–∑–∏)
        await update.message.reply_text("ü•Å *–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å...* ü•Å", parse_mode='Markdown')
        
        # 3. –í—ã–±–∏—Ä–∞–µ–º –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        pidor_users = get_random_users(members, 1)
        pidor_user = pidor_users[0].user
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        update_user_stats(
            pidor_user.id, 
            pidor_user.username, 
            pidor_user.first_name, 
            pidor_user.last_name, 
            'pidor'
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pidor_name = f"{pidor_user.first_name or ''}"
        if pidor_user.last_name:
            pidor_name += f" {pidor_user.last_name}"
        if pidor_user.username:
            pidor_name += f" (@{pidor_user.username})"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üèÜ *{TITLES['pidor']['title']}* üèÜ\n"
        response += f"{TITLES['pidor']['description']}\n"
        response += f"ü•á {pidor_name}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        save_today_results(response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in assign_pidor_day: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏–¥–æ—Ä–∞ –¥–Ω—è!")

async def assign_favorite_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –õ—é–±–∏–º—á–∏–∫–∞ –î–Ω—è"""
    try:
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        today_results = get_today_results()
        if today_results and '–õ—é–±–∏–º—á–∏–∫ –î–Ω—è' in today_results:
            await update.message.reply_text("üìÖ –õ—é–±–∏–º—á–∏–∫ –¥–Ω—è —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = await get_chat_members(chat_id, context)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è (–ø–æ —Ä–µ–∞–∫—Ü–∏—è–º)
        favorite_user_data = get_top_user_by_reactions()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏—è—Ö, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
        if not favorite_user_data:
            favorite_users = get_random_users(members, 1)
            favorite_user = favorite_users[0].user
            favorite_name = f"{favorite_user.first_name or ''}"
            if favorite_user.last_name:
                favorite_name += f" {favorite_user.last_name}"
            if favorite_user.username:
                favorite_name += f" (@{favorite_user.username})"
            favorite_name += " (–≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω–æ)"
        else:
            user_id, username, first_name, last_name, total_reactions = favorite_user_data
            favorite_name = f"{first_name or ''}"
            if last_name:
                favorite_name += f" {last_name}"
            if username:
                favorite_name += f" (@{username})"
            favorite_name += f" - {total_reactions} —Ä–µ–∞–∫—Ü–∏–π"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üíñ *{TITLES['favorite']['title']}* üíñ\n"
        response += f"{TITLES['favorite']['description']}\n"
        response += f"ü•á {favorite_name}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        save_today_results(response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in assign_favorite_day: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è!")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏–¥–æ—Ä–æ–≤ –∏ –ª—é–±–∏–º—á–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≤—Å–µ –≤—Ä–µ–º—è"""
    try:
        response = "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–¢–£–õ–û–í* üìä\n\n"
        
        for title_type, title_info in TITLES.items():
            response += f"{title_info['emoji']} *{title_info['title']}* {title_info['emoji']}\n"
            
            # –ó–∞ –Ω–µ–¥–µ–ª—é
            week_stats = get_user_stats_period(title_type, 7)
            response += "üìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
            if week_stats:
                for i, (username, first_name, last_name, count) in enumerate(week_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –º–µ—Å—è—Ü
            month_stats = get_user_stats_period(title_type, 30)
            response += "üìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
            if month_stats:
                for i, (username, first_name, last_name, count) in enumerate(month_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è
            all_time_stats = get_all_time_stats(title_type)
            response += "üìÖ *–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:*\n"
            if all_time_stats:
                for i, (username, first_name, last_name, count) in enumerate(all_time_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            response += "\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")

async def tester_day_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω—è"""
    try:
        user = update.message.from_user
        
        if not can_user_get_prediction(user.id):
            await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        chat_id = update.effective_chat.id
        members = await get_chat_members(chat_id, context)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
        tester_users = get_random_users(members, 1)
        tester_user = tester_users[0].user
        
        tester_name = f"{tester_user.first_name or ''}"
        if tester_user.last_name:
            tester_name += f" {tester_user.last_name}"
        if tester_user.username:
            tester_name += f" (@{tester_user.username})"
        
        response = f"üîÆ *–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–©–ò–ö–ê –î–ù–Ø* üîÆ\n\n"
        response += f"–ú–æ–π —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç...\n"
        response += f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–Ω—è: {tester_name}!\n\n"
        response += "–ü—É—Å—Ç—å –±–∞–≥–∏ –≥–æ—Ä—è—Ç, –∞ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç! üêõüî•"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in tester_day_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω—è!")

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_triggers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    try:
        message_text = update.message.text.lower()
        user = update.message.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_message_reaction(update, context)
        
        # –¢—Ä–∏–≥–≥–µ—Ä: –ö–∞—Ç—è/–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ + "–ø–æ–∫–∞"
        if user.first_name and ('–∫–∞—Ç—è' in user.first_name.lower() or '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞' in user.first_name.lower()):
            if '–ø–æ–∫–∞' in message_text:
                await update.message.reply_text("–ü–æ–∫–∞ –ö–∞—Ç—å! üëã")
                return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–¥–∞" -> "–ü–∏–∑–¥–∞"
        if message_text.strip() == '–¥–∞':
            await update.message.reply_text("–ü–∏–∑–¥–∞! üòè")
            return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–Ω–µ—Ç" -> "–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç"
        if message_text.strip() == '–Ω–µ—Ç':
            await update.message.reply_text("–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç! üè≥Ô∏è‚Äçüåà")
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–æ—à–∏–±–∫–∞" -> IT –æ—Ç–≤–µ—Ç
        if '–æ—à–∏–±–∫–∞' in message_text or 'error' in message_text:
            it_response = random.choice(IT_RESPONSES['–æ—à–∏–±–∫–∞'])
            await update.message.reply_text(it_response)
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–ø–∏–∑–¥–µ—Ü" -> –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç
        if '–ø–∏–∑–¥–µ—Ü' in message_text:
            rude_response = random.choice(RUDE_RESPONSES)
            await update.message.reply_text(rude_response)
            return
            
        # IT-—Ç—Ä–∏–≥–≥–µ—Ä—ã
        for trigger_word in ['–æ—Ñ–∏—Å', '–∞–π–æ—Å', '–∞–Ω–¥—Ä–æ–∏–¥']:
            if trigger_word in message_text:
                it_response = random.choice(IT_RESPONSES[trigger_word])
                await update.message.reply_text(it_response)
                return
                
    except Exception as e:
        logger.error(f"Error in message_triggers: {e}")

def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("pidor", assign_pidor_day))
    application.add_handler(CommandHandler("favorite", assign_favorite_day))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("tester", tester_day_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_triggers))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling()

if __name__ == "__main__":
    main()–æ–º –∏ –ø–∏—Ü—Ü–µ–π? –û–±–∞ –ª—é–±—è—Ç, –∫–æ–≥–¥–∞ –∏—Ö —É–∫–ª–∞–¥—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–æ–ª!",
]

# –ì—Ä—É–±—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
RUDE_RESPONSES = [
    "–î–∞ –∏–¥–∏ —Ç—ã –Ω–∞—Ö—É–π —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏!",
    "–ü–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –º–Ω–µ –ø–æ—Ö—É–π!",
    "–ù—É –≤–æ—Ç –æ–ø—è—Ç—å —ç—Ç–æ—Ç –ø–∏–∑–¥–µ—Ü –Ω–∞—á–∞–ª—Å—è...",
    "–ò–¥–∏ –Ω–∞—Ö—É–π, —è –∑–∞–Ω—è—Ç –±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–π —Ö—É–π–Ω–µ–π!",
    "–ü–∏–∑–¥–µ—Ü –∫–∞–∫ –≤—Å—ë –∑–∞–µ–±–∞–ª–æ!",
    "–û–ø—è—Ç—å —ç—Ç–æ—Ç —Ö—É–µ–≤—ã–π –ø–∏–∑–¥–µ—Ü..."
]

# –¢–ò–¢–£–õ–´ –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –í–´–ë–û–†–ê
TITLES = {
    'pidor': {
        'title': 'üèÜ –ü–∏–¥–æ—Ä –î–Ω—è',
        'description': '–°–∞–º—ã–π –≤–µ–∑—É—á–∏–π –Ω–µ—É–¥–∞—á–Ω–∏–∫ —á–∞—Ç–∞!',
        'emoji': 'üèÜ'
    },
    'favorite': {
        'title': 'üíñ –õ—é–±–∏–º—á–∏–∫ –î–Ω—è', 
        'description': '–ß—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π!',
        'emoji': 'üíñ'
    },
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS daily_results (
        date TEXT PRIMARY KEY,
        results TEXT,
        last_updated TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        title_type TEXT,
        count INTEGER DEFAULT 0,
        last_awarded TEXT,
        PRIMARY KEY (user_id, title_type)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_reactions (
        message_id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        reactions_count INTEGER DEFAULT 0,
        date TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tester_predictions (
        user_id INTEGER PRIMARY KEY,
        last_prediction_date TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

def get_today_results():
    today = datetime.now().date().isoformat()
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT results FROM daily_results WHERE date = ?', (today,))
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else None

def save_today_results(results):
    today = datetime.now().date().isoformat()
    now = datetime.now().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO daily_results (date, results, last_updated)
        VALUES (?, ?, ?)
    ''', (today, results, now))
    
    conn.commit()
    conn.close()

def update_user_stats(user_id, username, first_name, last_name, title_type):
    today = datetime.now().date().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO user_stats 
        (user_id, username, first_name, last_name, title_type, count, last_awarded)
        VALUES (?, ?, ?, ?, ?, COALESCE((SELECT count FROM user_stats WHERE user_id = ? AND title_type = ?), 0) + 1, ?)
    ''', (user_id, username, first_name, last_name, title_type, user_id, title_type, today))
    
    conn.commit()
    conn.close()

def get_user_stats_period(title_type, period_days):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    start_date = (datetime.now() - timedelta(days=period_days)).date().isoformat()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ? AND last_awarded >= ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type, start_date))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_all_time_stats(title_type):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type,))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_random_users(chat_members, count=1):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
    human_members = [m for m in chat_members if not m.user.is_bot]
    return random.sample(human_members, min(count, len(human_members)))

def get_top_user_by_reactions():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date().isoformat()
    cursor.execute('''
        SELECT user_id, username, first_name, last_name, SUM(reactions_count) as total_reactions
        FROM message_reactions 
        WHERE date = ?
        GROUP BY user_id 
        ORDER BY total_reactions DESC 
        LIMIT 1
    ''', (today,))
    
    result = cursor.fetchone()
    conn.close()
    
    return result

def can_user_get_prediction(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().date().isoformat()
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT last_prediction_date FROM tester_predictions WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result and result[0] == today:
        conn.close()
        return False
    
    cursor.execute('''
        INSERT OR REPLACE INTO tester_predictions (user_id, last_prediction_date)
        VALUES (?, ?)
    ''', (user_id, today))
    
    conn.commit()
    conn.close()
    return True

async def save_message_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –µ–≥–æ —Ä–µ–∞–∫—Ü–∏—è—Ö"""
    try:
        message = update.message
        user = message.from_user
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
        reaction_count = 0
        if message.reactions:
            for reaction in message.reactions:
                reaction_count += reaction.count
        
        conn = sqlite3.connect('daily_titles.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO message_reactions 
            (message_id, user_id, username, first_name, last_name, reactions_count, date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            message.message_id, 
            user.id, 
            user.username, 
            user.first_name, 
            user.last_name,
            reaction_count,
            datetime.now().date().isoformat()
        ))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error saving message reaction: {e}")

async def assign_daily_titles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤"""
    try:
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        today_results = get_today_results()
        if today_results:
            await update.import os
import random
import logging
import sqlite3
import datetime
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–µ–π—Å–∫–∏–µ –ø–æ–¥–∫–æ–ª—ã –¥–ª—è –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
GAY_JOKES = [
    "–ö–∞–∫ –ø–∏–¥–æ—Ä—ã –Ω–∞–∑—ã–≤–∞—é—Ç —Å–≤–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π? - –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π!",
    "–ü–æ—á–µ–º—É –ø–∏–¥–æ—Ä—ã —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –ª—é–±—è—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è!",
    "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –ø–∏–¥–æ—Ä–æ–º –∏ –ø–∏—Ü—Ü–µ–π? –û–±–∞ –ª—é–±—è—Ç, –∫–æ–≥–¥–∞ –∏—Ö —É–∫–ª–∞–¥—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–æ–ª!",
]

# –ì—Ä—É–±—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
RUDE_RESPONSES = [
    "–î–∞ –∏–¥–∏ —Ç—ã –Ω–∞—Ö—É–π —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏!",
    "–ü–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –º–Ω–µ –ø–æ—Ö—É–π!",
    "–ù—É –≤–æ—Ç –æ–ø—è—Ç—å —ç—Ç–æ—Ç –ø–∏–∑–¥–µ—Ü –Ω–∞—á–∞–ª—Å—è...",
    "–ò–¥–∏ –Ω–∞—Ö—É–π, —è –∑–∞–Ω—è—Ç –±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–π —Ö—É–π–Ω–µ–π!",
    "–ü–∏–∑–¥–µ—Ü –∫–∞–∫ –≤—Å—ë –∑–∞–µ–±–∞–ª–æ!",
    "–û–ø—è—Ç—å —ç—Ç–æ—Ç —Ö—É–µ–≤—ã–π –ø–∏–∑–¥–µ—Ü..."
]

# –¢–ò–¢–£–õ–´ –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –í–´–ë–û–†–ê
TITLES = {
    'pidor': {
        'title': 'üèÜ –ü–∏–¥–æ—Ä –î–Ω—è',
        'description': '–°–∞–º—ã–π –≤–µ–∑—É—á–∏–π –Ω–µ—É–¥–∞—á–Ω–∏–∫ —á–∞—Ç–∞!',
        'emoji': 'üèÜ'
    },
    'favorite': {
        'title': 'üíñ –õ—é–±–∏–º—á–∏–∫ –î–Ω—è', 
        'description': '–ß—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π!',
        'emoji': 'üíñ'
    },
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS daily_results (
        date TEXT PRIMARY KEY,
        results TEXT,
        last_updated TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        title_type TEXT,
        count INTEGER DEFAULT 0,
        last_awarded TEXT,
        PRIMARY KEY (user_id, title_type)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_reactions (
        message_id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        reactions_count INTEGER DEFAULT 0,
        date TEXT
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tester_predictions (
        user_id INTEGER PRIMARY KEY,
        last_prediction_date TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

def get_today_results():
    today = datetime.now().date().isoformat()
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT results FROM daily_results WHERE date = ?', (today,))
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else None

def save_today_results(results):
    today = datetime.now().date().isoformat()
    now = datetime.now().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO daily_results (date, results, last_updated)
        VALUES (?, ?, ?)
    ''', (today, results, now))
    
    conn.commit()
    conn.close()

def update_user_stats(user_id, username, first_name, last_name, title_type):
    today = datetime.now().date().isoformat()
    
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO user_stats 
        (user_id, username, first_name, last_name, title_type, count, last_awarded)
        VALUES (?, ?, ?, ?, ?, COALESCE((SELECT count FROM user_stats WHERE user_id = ? AND title_type = ?), 0) + 1, ?)
    ''', (user_id, username, first_name, last_name, title_type, user_id, title_type, today))
    
    conn.commit()
    conn.close()

def get_user_stats_period(title_type, period_days):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    start_date = (datetime.now() - timedelta(days=period_days)).date().isoformat()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ? AND last_awarded >= ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type, start_date))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_all_time_stats(title_type):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT username, first_name, last_name, COUNT(*) as count
        FROM user_stats 
        WHERE title_type = ?
        GROUP BY user_id 
        ORDER BY count DESC 
        LIMIT 10
    ''', (title_type,))
    
    stats = cursor.fetchall()
    conn.close()
    
    return stats

def get_random_users(chat_members, count=1):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
    human_members = [m for m in chat_members if not m.user.is_bot]
    return random.sample(human_members, min(count, len(human_members)))

def get_top_user_by_reactions():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π"""
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date().isoformat()
    cursor.execute('''
        SELECT user_id, username, first_name, last_name, SUM(reactions_count) as total_reactions
        FROM message_reactions 
        WHERE date = ?
        GROUP BY user_id 
        ORDER BY total_reactions DESC 
        LIMIT 1
    ''', (today,))
    
    result = cursor.fetchone()
    conn.close()
    
    return result

def can_user_get_prediction(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().date().isoformat()
    conn = sqlite3.connect('daily_titles.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT last_prediction_date FROM tester_predictions WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result and result[0] == today:
        conn.close()
        return False
    
    cursor.execute('''
        INSERT OR REPLACE INTO tester_predictions (user_id, last_prediction_date)
        VALUES (?, ?)
    ''', (user_id, today))
    
    conn.commit()
    conn.close()
    return True

async def save_message_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –µ–≥–æ —Ä–µ–∞–∫—Ü–∏—è—Ö"""
    try:
        message = update.message
        user = message.from_user
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π
        reaction_count = 0
        if message.reactions:
            for reaction in message.reactions:
                reaction_count += reaction.count
        
        conn = sqlite3.connect('daily_titles.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO message_reactions 
            (message_id, user_id, username, first_name, last_name, reactions_count, date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            message.message_id, 
            user.id, 
            user.username, 
            user.first_name, 
            user.last_name,
            reaction_count,
            datetime.now().date().isoformat()
        ))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"Error saving message reaction: {e}")

async def get_chat_members(chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = []
        async for member in context.bot.get_chat_members(chat_id):
            members.append(member)
        return members
    except Exception as e:
        logger.error(f"Error getting chat members: {e}")
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∫ fallback
        return await context.bot.get_chat_administrators(chat_id)

async def assign_pidor_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ü–∏–¥–æ—Ä–∞ –î–Ω—è"""
    try:
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        today_results = get_today_results()
        if today_results and '–ü–∏–¥–æ—Ä –î–Ω—è' in today_results:
            await update.message.reply_text("üìÖ –ü–∏–¥–æ—Ä –¥–Ω—è —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = await get_chat_members(chat_id, context)
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–π—Å–∫—É—é —à—É—Ç–∫—É
        gay_joke = random.choice(GAY_JOKES)
        await update.message.reply_text(gay_joke)
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –±–∞—Ä–∞–±–∞–Ω–∞ (—ç–º–æ–¥–∑–∏)
        await update.message.reply_text("ü•Å *–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å...* ü•Å", parse_mode='Markdown')
        
        # 3. –í—ã–±–∏—Ä–∞–µ–º –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        pidor_users = get_random_users(members, 1)
        pidor_user = pidor_users[0].user
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        update_user_stats(
            pidor_user.id, 
            pidor_user.username, 
            pidor_user.first_name, 
            pidor_user.last_name, 
            'pidor'
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pidor_name = f"{pidor_user.first_name or ''}"
        if pidor_user.last_name:
            pidor_name += f" {pidor_user.last_name}"
        if pidor_user.username:
            pidor_name += f" (@{pidor_user.username})"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üèÜ *{TITLES['pidor']['title']}* üèÜ\n"
        response += f"{TITLES['pidor']['description']}\n"
        response += f"ü•á {pidor_name}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        save_today_results(response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in assign_pidor_day: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏–¥–æ—Ä–∞ –¥–Ω—è!")

async def assign_favorite_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –õ—é–±–∏–º—á–∏–∫–∞ –î–Ω—è"""
    try:
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        today_results = get_today_results()
        if today_results and '–õ—é–±–∏–º—á–∏–∫ –î–Ω—è' in today_results:
            await update.message.reply_text("üìÖ –õ—é–±–∏–º—á–∏–∫ –¥–Ω—è —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = await get_chat_members(chat_id, context)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è (–ø–æ —Ä–µ–∞–∫—Ü–∏—è–º)
        favorite_user_data = get_top_user_by_reactions()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏—è—Ö, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
        if not favorite_user_data:
            favorite_users = get_random_users(members, 1)
            favorite_user = favorite_users[0].user
            favorite_name = f"{favorite_user.first_name or ''}"
            if favorite_user.last_name:
                favorite_name += f" {favorite_user.last_name}"
            if favorite_user.username:
                favorite_name += f" (@{favorite_user.username})"
            favorite_name += " (–≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω–æ)"
        else:
            user_id, username, first_name, last_name, total_reactions = favorite_user_data
            favorite_name = f"{first_name or ''}"
            if last_name:
                favorite_name += f" {last_name}"
            if username:
                favorite_name += f" (@{username})"
            favorite_name += f" - {total_reactions} —Ä–µ–∞–∫—Ü–∏–π"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üíñ *{TITLES['favorite']['title']}* üíñ\n"
        response += f"{TITLES['favorite']['description']}\n"
        response += f"ü•á {favorite_name}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        save_today_results(response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in assign_favorite_day: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è!")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏–¥–æ—Ä–æ–≤ –∏ –ª—é–±–∏–º—á–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≤—Å–µ –≤—Ä–µ–º—è"""
    try:
        response = "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–¢–£–õ–û–í* üìä\n\n"
        
        for title_type, title_info in TITLES.items():
            response += f"{title_info['emoji']} *{title_info['title']}* {title_info['emoji']}\n"
            
            # –ó–∞ –Ω–µ–¥–µ–ª—é
            week_stats = get_user_stats_period(title_type, 7)
            response += "üìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
            if week_stats:
                for i, (username, first_name, last_name, count) in enumerate(week_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –º–µ—Å—è—Ü
            month_stats = get_user_stats_period(title_type, 30)
            response += "üìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
            if month_stats:
                for i, (username, first_name, last_name, count) in enumerate(month_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è
            all_time_stats = get_all_time_stats(title_type)
            response += "üìÖ *–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:*\n"
            if all_time_stats:
                for i, (username, first_name, last_name, count) in enumerate(all_time_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            response += "\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")

async def tester_day_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω—è"""
    try:
        user = update.message.from_user
        
        if not can_user_get_prediction(user.id):
            await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        chat_id = update.effective_chat.id
        members = await get_chat_members(chat_id, context)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
        tester_users = get_random_users(members, 1)
        tester_user = tester_users[0].user
        
        tester_name = f"{tester_user.first_name or ''}"
        if tester_user.last_name:
            tester_name += f" {tester_user.last_name}"
        if tester_user.username:
            tester_name += f" (@{tester_user.username})"
        
        response = f"üîÆ *–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–©–ò–ö–ê –î–ù–Ø* üîÆ\n\n"
        response += f"–ú–æ–π —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç...\n"
        response += f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–Ω—è: {tester_name}!\n\n"
        response += "–ü—É—Å—Ç—å –±–∞–≥–∏ –≥–æ—Ä—è—Ç, –∞ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç! üêõüî•"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in tester_day_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω—è!")

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_triggers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    try:
        message_text = update.message.text.lower()
        user = update.message.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_message_reaction(update, context)
        
        # –¢—Ä–∏–≥–≥–µ—Ä: –ö–∞—Ç—è/–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ + "–ø–æ–∫–∞"
        if user.first_name and ('–∫–∞—Ç—è' in user.first_name.lower() or '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞' in user.first_name.lower()):
            if '–ø–æ–∫–∞' in message_text:
                await update.message.reply_text("–ü–æ–∫–∞ –ö–∞—Ç—å! üëã")
                return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–¥–∞" -> "–ü–∏–∑–¥–∞"
        if message_text.strip() == '–¥–∞':
            await update.message.reply_text("–ü–∏–∑–¥–∞! üòè")
            return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–Ω–µ—Ç" -> "–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç"
        if message_text.strip() == '–Ω–µ—Ç':
            await update.message.reply_text("–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç! üè≥Ô∏è‚Äçüåà")
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–æ—à–∏–±–∫–∞" -> –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç
        if '–æ—à–∏–±–∫–∞' in message_text or 'error' in message_text:
            rude_response = random.choice(RUDE_RESPONSES)
            await update.message.reply_text(rude_response)
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–ø–∏–∑–¥–µ—Ü" -> –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç
        if '–ø–∏–∑–¥–µ—Ü' in message_text:
            rude_response = random.choice(RUDE_RESPONSES)
            await update.message.reply_text(rude_response)
            return
            
    except Exception as e:
        logger.error(f"Error in message_triggers: {e}")

def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("pidor", assign_pidor_day))
    application.add_handler(CommandHandler("favorite", assign_favorite_day))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("tester", tester_day_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_triggers))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling()

if __name__ == "__main__":
    main()message.reply_text("üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç–∏—Ç—É–ª—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã!\n\n" + today_results)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        members = await context.bot.get_chat_administrators(chat_id)
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–π—Å–∫—É—é —à—É—Ç–∫—É
        gay_joke = random.choice(GAY_JOKES)
        await update.message.reply_text(gay_joke)
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –±–∞—Ä–∞–±–∞–Ω–∞ (—ç–º–æ–¥–∑–∏)
        await update.message.reply_text("ü•Å *–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å...* ü•Å", parse_mode='Markdown')
        
        # 3. –í—ã–±–∏—Ä–∞–µ–º –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        pidor_users = get_random_users(members, 1)
        pidor_user = pidor_users[0].user
        
        # 4. –í—ã–±–∏—Ä–∞–µ–º –ª—é–±–∏–º—á–∏–∫–∞ –¥–Ω—è (–ø–æ —Ä–µ–∞–∫—Ü–∏—è–º)
        favorite_user_data = get_top_user_by_reactions()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏—è—Ö, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
        if not favorite_user_data:
            favorite_users = get_random_users(members, 1)
            favorite_user = favorite_users[0].user
            favorite_name = f"{favorite_user.first_name or ''}"
            if favorite_user.last_name:
                favorite_name += f" {favorite_user.last_name}"
            if favorite_user.username:
                favorite_name += f" (@{favorite_user.username})"
        else:
            user_id, username, first_name, last_name, total_reactions = favorite_user_data
            favorite_name = f"{first_name or ''}"
            if last_name:
                favorite_name += f" {last_name}"
            if username:
                favorite_name += f" (@{username})"
            favorite_name += f" - {total_reactions} —Ä–µ–∞–∫—Ü–∏–π"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
        update_user_stats(
            pidor_user.id, 
            pidor_user.username, 
            pidor_user.first_name, 
            pidor_user.last_name, 
            'pidor'
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pidor_name = f"{pidor_user.first_name or ''}"
        if pidor_user.last_name:
            pidor_name += f" {pidor_user.last_name}"
        if pidor_user.username:
            pidor_name += f" (@{pidor_user.username})"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        response = "üéâ *–ï–ñ–ï–î–ù–ï–í–ù–´–ï –¢–ò–¢–£–õ–´* üéâ\n\n"
        
        # –ü–∏–¥–æ—Ä –¥–Ω—è
        response += f"üèÜ *{TITLES['pidor']['title']}* üèÜ\n"
        response += f"{TITLES['pidor']['description']}\n"
        response += f"ü•á {pidor_name}\n\n"
        
        # –õ—é–±–∏–º—á–∏–∫ –¥–Ω—è
        response += f"üíñ *{TITLES['favorite']['title']}* üíñ\n"
        response += f"{TITLES['favorite']['description']}\n"
        response += f"ü•á {favorite_name}\n\n"
        
        response += "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üèÜ"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        save_today_results(response)
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in assign_daily_titles: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç–∏—Ç—É–ª–æ–≤!")

async def daily_titles_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤"""
    await assign_daily_titles(update, context)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏–¥–æ—Ä–æ–≤ –∏ –ª—é–±–∏–º—á–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≤—Å–µ –≤—Ä–µ–º—è"""
    try:
        response = "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–¢–£–õ–û–í* üìä\n\n"
        
        for title_type, title_info in TITLES.items():
            response += f"{title_info['emoji']} *{title_info['title']}* {title_info['emoji']}\n"
            
            # –ó–∞ –Ω–µ–¥–µ–ª—é
            week_stats = get_user_stats_period(title_type, 7)
            response += "üìÖ *–ó–∞ –Ω–µ–¥–µ–ª—é:*\n"
            if week_stats:
                for i, (username, first_name, last_name, count) in enumerate(week_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –º–µ—Å—è—Ü
            month_stats = get_user_stats_period(title_type, 30)
            response += "üìÖ *–ó–∞ –º–µ—Å—è—Ü:*\n"
            if month_stats:
                for i, (username, first_name, last_name, count) in enumerate(month_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            # –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è
            all_time_stats = get_all_time_stats(title_type)
            response += "üìÖ *–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:*\n"
            if all_time_stats:
                for i, (username, first_name, last_name, count) in enumerate(all_time_stats[:3], 1):
                    user_name = first_name or ""
                    if last_name:
                        user_name += f" {last_name}"
                    if username:
                        user_name += f" (@{username})"
                    response += f"{i}. {user_name} - {count} —Ä–∞–∑(–∞)\n"
            else:
                response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            response += "\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")

async def tester_day_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω—è"""
    try:
        user = update.message.from_user
        
        if not can_user_get_prediction(user.id):
            await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        chat_id = update.effective_chat.id
        members = await context.bot.get_chat_administrators(chat_id)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
        tester_users = get_random_users(members, 1)
        tester_user = tester_users[0].user
        
        tester_name = f"{tester_user.first_name or ''}"
        if tester_user.last_name:
            tester_name += f" {tester_user.last_name}"
        if tester_user.username:
            tester_name += f" (@{tester_user.username})"
        
        response = f"üîÆ *–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–©–ò–ö–ê –î–ù–Ø* üîÆ\n\n"
        response += f"–ú–æ–π —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç...\n"
        response += f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–Ω—è: {tester_name}!\n\n"
        response += "–ü—É—Å—Ç—å –±–∞–≥–∏ –≥–æ—Ä—è—Ç, –∞ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç! üêõüî•"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in tester_day_command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –¥–Ω—è!")

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_triggers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    try:
        message_text = update.message.text.lower()
        user = update.message.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await save_message_reaction(update, context)
        
        # –¢—Ä–∏–≥–≥–µ—Ä: –ö–∞—Ç—è/–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ + "–ø–æ–∫–∞"
        if user.first_name and ('–∫–∞—Ç—è' in user.first_name.lower() or '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞' in user.first_name.lower()):
            if '–ø–æ–∫–∞' in message_text:
                await update.message.reply_text("–ü–æ–∫–∞ –ö–∞—Ç—å! üëã")
                return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–¥–∞" -> "–ü–∏–∑–¥–∞"
        if message_text.strip() == '–¥–∞':
            await update.message.reply_text("–ü–∏–∑–¥–∞! üòè")
            return
        
        # –¢—Ä–∏–≥–≥–µ—Ä: "–Ω–µ—Ç" -> "–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç"
        if message_text.strip() == '–Ω–µ—Ç':
            await update.message.reply_text("–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç! üè≥Ô∏è‚Äçüåà")
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–æ—à–∏–±–∫–∞" -> –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç
        if '–æ—à–∏–±–∫–∞' in message_text or 'error' in message_text:
            rude_response = random.choice(RUDE_RESPONSES)
            await update.message.reply_text(rude_response)
            return
            
        # –¢—Ä–∏–≥–≥–µ—Ä: "–ø–∏–∑–¥–µ—Ü" -> –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç
        if '–ø–∏–∑–¥–µ—Ü' in message_text:
            rude_response = random.choice(RUDE_RESPONSES)
            await update.message.reply_text(rude_response)
            return
            
    except Exception as e:
        logger.error(f"Error in message_triggers: {e}")

def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("daily", daily_titles_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("tester", tester_day_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_triggers))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling()

if __name__ == "__main__":
    main()


